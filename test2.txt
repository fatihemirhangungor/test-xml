string filePath = "path_to_your_excel_file.xlsx";

        using (XLWorkbook workbook = new XLWorkbook(filePath))
        {
            IXLWorksheet worksheet = workbook.Worksheet(1);
            DataTable dataTable = new DataTable();
            
            // Add columns to DataTable
            foreach (IXLColumn column in worksheet.Columns())
            {
                dataTable.Columns.Add(column.Name);
            }
            
            // Add rows to DataTable
            foreach (IXLRow row in worksheet.Rows())
            {
                DataRow dataRow = dataTable.NewRow();
                foreach (var cell in row.Cells())
                {
                    dataRow[cell.Address.ColumnNumber - 1] = cell.Value;
                }
                dataTable.Rows.Add(dataRow);
            }
            
            // Display data
            foreach (DataRow row in dataTable.Rows)
            {
                foreach (var item in row.ItemArray)
                {
                    Console.Write(item + " ");
                }
                Console.WriteLine();
            }
        }


foreach (XmlNode Node in list)
{
    //YENİ SAYFA OKU
    OleDbConnection conEft;
    OleDbDataAdapter daEft;
    OleDbConnection conHavale;
    OleDbDataAdapter daHavale;
    if (txtlblSecilenEftDosya.Text.ToUpper().Contains("EFT"))
    {
        conEft = new OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + sFileXlsEft + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\"");
        daEft = new OleDbDataAdapter("select * from [" + Node.ChildNodes[0].InnerText + "$]", conEft);
        dtEft = new DataTable();
        daEft.Fill(dtEft);
    }
    if (txtlblSecilenHvlDosya.Text.ToUpper().Contains("HAVALE"))
    {
        conHavale = new OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + sFileXlsHavale + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\"");
        //conHavale = new OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + sFileXlsHavale + ";Extended Properties=\"Excel 12.0;HDR=Yes;IMEX=1\"");
        daHavale = new OleDbDataAdapter("select * from [" + Node.ChildNodes[0].InnerText + "$]", conHavale);
        dtHavale = new DataTable();
        daHavale.Fill(dtHavale);
    }
}


using ClosedXML.Excel;
using System.Data;

//... other necessary using directives

foreach (XmlNode Node in list)
{
    // YENİ SAYFA OKU
    if (txtlblSecilenEftDosya.Text.ToUpper().Contains("EFT"))
    {
        using (var workbook = new XLWorkbook(sFileXlsEft))
        {
            var worksheet = workbook.Worksheet(Node.ChildNodes[0].InnerText);
            var dtEft = new DataTable();
            
            bool firstRow = true;
            foreach (IXLRow row in worksheet.Rows())
            {
                if (firstRow)
                {
                    foreach (IXLCell cell in row.Cells())
                    {
                        dtEft.Columns.Add(cell.Value.ToString());
                    }
                    firstRow = false;
                }
                else
                {
                    dtEft.Rows.Add();
                    int i = 0;
                    foreach (IXLCell cell in row.Cells())
                    {
                        dtEft.Rows[dtEft.Rows.Count - 1][i] = cell.Value.ToString();
                        i++;
                    }
                }
            }
        }
    }

    if (txtlblSecilenHvlDosya.Text.ToUpper().Contains("HAVALE"))
    {
        using (var workbook = new XLWorkbook(sFileXlsHavale))
        {
            var worksheet = workbook.Worksheet(Node.ChildNodes[0].InnerText);
            var dtHavale = new DataTable();
            
            bool firstRow = true;
            foreach (IXLRow row in worksheet.Rows())
            {
                if (firstRow)
                {
                    foreach (IXLCell cell in row.Cells())
                    {
                        dtHavale.Columns.Add(cell.Value.ToString());
                    }
                    firstRow = false;
                }
                else
                {
                    dtHavale.Rows.Add();
                    int i = 0;
                    foreach (IXLCell cell in row.Cells())
                    {
                        dtHavale.Rows[dtHavale.Rows.Count - 1][i] = cell.Value.ToString();
                        i++;
                    }
                }
            }
        }
    }
}

