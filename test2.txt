private DataSet ExcelToDataSet(string sourceFile)
{
    OleDbConnection conExcel;
    OleDbDataAdapter daExcel;
    conExcel = new OleDbConnection(@"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + sourceFile + ";Extended Properties='Excel 12.0;HDR=Yes;IMEX=1'");
    daExcel = new OleDbDataAdapter("select * from [" + "Veri Giriş Sayfası" + "$]", conExcel);
    DataSet dataSet = new DataSet();
    try
    {
        daExcel.Fill(dataSet);
    }
    catch (Exception ex)
    {
        if (ex.Message.Contains("Not a legal OleAut date."))
        { throw new Exception("Excel dosyası okunurken hata oluştu. İpucu: Excel içine tarih girmiş olabilir misiniz?");}
        else if (ex.Message.Contains("'Veri Giriş Sayfası$' is not a valid name."))
        { throw new Exception("Excel dosyası okunurken hata oluştu. İpucu: Doğru Excel dosyasını (EVAS Döviz Aylık Vaziyet Bildirim Exceli) girdiğinizden emin misiniz?");}
        else 
        { throw new Exception("Excel dosyası okunurken hata oluştu. Hata Mesajı: " + ex.Message ); }
    }
    return dataSet;
}



using System;
using System.Data;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;

private DataSet ExcelToDataSet(string sourceFile)
{
    DataSet dataSet = new DataSet();
    DataTable dataTable = new DataTable("Veri Giriş Sayfası");
    dataSet.Tables.Add(dataTable);

    using (SpreadsheetDocument spreadsheetDocument = SpreadsheetDocument.Open(sourceFile, false))
    {
        WorkbookPart workbookPart = spreadsheetDocument.WorkbookPart;
        Sheet sheet = workbookPart.Workbook.Descendants<Sheet>().FirstOrDefault(s => s.Name == "Veri Giriş Sayfası");
        
        if (sheet == null)
        {
            throw new Exception("Excel dosyası okunurken hata oluştu. İpucu: Doğru Excel dosyasını (EVAS Döviz Aylık Vaziyet Bildirim Exceli) girdiğinizden emin misiniz?");
        }

        WorksheetPart worksheetPart = (WorksheetPart)(workbookPart.GetPartById(sheet.Id));
        SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();

        bool firstRow = true;
        foreach (Row row in sheetData.Descendants<Row>())
        {
            DataRow dataRow = dataTable.NewRow();

            int columnIndex = 0;
            foreach (Cell cell in row.Descendants<Cell>())
            {
                string cellValue = GetCellValue(spreadsheetDocument, cell);

                if (firstRow)
                {
                    dataTable.Columns.Add(cellValue);
                }
                else
                {
                    dataRow[columnIndex] = cellValue;
                }
                columnIndex++;
            }

            if (!firstRow)
            {
                dataTable.Rows.Add(dataRow);
            }

            firstRow = false;
        }
    }

    return dataSet;
}

private string GetCellValue(SpreadsheetDocument doc, Cell cell)
{
    SharedStringTablePart stringTablePart = doc.WorkbookPart.SharedStringTablePart;
    string value = cell.CellValue.InnerXml;

    if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
    {
        return stringTablePart.SharedStringTable.ChildElements[Int32.Parse(value)].InnerText;
    }
    else
    {
        return value;
    }
}

