using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Spreadsheet;
using System;
using System.Data;

public DataTable ReadExcel(string fileName, string sheetName)
{
    DataTable dataTable = new DataTable();

    try
    {
        using (SpreadsheetDocument document = SpreadsheetDocument.Open(fileName, false))
        {
            WorkbookPart workbookPart = document.WorkbookPart;
            Sheet sheet = workbookPart.Workbook.Descendants<Sheet>()
                .FirstOrDefault(s => s.Name == sheetName);

            if (sheet == null)
                throw new ArgumentException($"Sheet with name '{sheetName}' not found.");

            WorksheetPart worksheetPart = (WorksheetPart)workbookPart.GetPartById(sheet.Id);
            SheetData sheetData = worksheetPart.Worksheet.GetFirstChild<SheetData>();

            // Read rows and columns
            bool headerRow = true;
            foreach (Row row in sheetData.Elements<Row>())
            {
                DataRow dataRow = dataTable.NewRow();
                int cellIndex = 0;

                foreach (Cell cell in row.Elements<Cell>())
                {
                    // Adjust for missing cells
                    int currentCellIndex = GetColumnIndex(cell.CellReference) - 1;
                    while (cellIndex < currentCellIndex)
                    {
                        if (headerRow)
                            dataTable.Columns.Add($"Column{cellIndex + 1}");
                        cellIndex++;
                    }

                    string cellValue = GetCellValue(cell, workbookPart);

                    if (headerRow)
                        dataTable.Columns.Add(cellValue ?? $"Column{cellIndex + 1}");
                    else
                        dataRow[cellIndex] = cellValue;

                    cellIndex++;
                }

                if (!headerRow)
                    dataTable.Rows.Add(dataRow);

                headerRow = false;
            }
        }
    }
    catch (Exception ex)
    {
        throw new ApplicationException("Error reading Excel file.", ex);
    }

    return dataTable;
}

private string GetCellValue(Cell cell, WorkbookPart workbookPart)
{
    if (cell == null || cell.CellValue == null)
        return null;

    string value = cell.CellValue.InnerText;

    // Check if the cell contains a shared string
    if (cell.DataType != null && cell.DataType.Value == CellValues.SharedString)
    {
        return workbookPart.SharedStringTablePart.SharedStringTable
            .ElementAt(int.Parse(value)).InnerText;
    }

    return value;
}

private int GetColumnIndex(string cellReference)
{
    if (string.IsNullOrEmpty(cellReference))
        return -1;

    // Extract column letters from the cell reference
    string columnReference = new string(cellReference
        .Where(char.IsLetter).ToArray());

    int columnIndex = 0;
    foreach (char letter in columnReference)
    {
        columnIndex *= 26;
        columnIndex += (letter - 'A' + 1);
    }

    return columnIndex;
}
